df.comp2$demo.pred[i] = coef(lm(scale(dScore) ~ scale(demopred),
data = study2.demo.comp))[2]
df.comp2$demoS.predS[i] = coef(lm(scale(dScoreS) ~ scale(demopredS),
data = study2.demo.comp))[2]
df.comp2$demo.pred.p[i] = summary(lm(scale(dScore) ~ scale(demopred),
data = study2.demo.comp))$coefficients[2,4]
df.comp2$imp.pred[i] = coef(lm(scale(dScore) ~ scale(predict),
data = study2.demo.comp))[2]
df.comp2$impS.predS[i] = coef(lm(scale(dScoreS) ~ scale(predictS),
data = study2.demo.comp))[2]
df.comp2$imp.pred.inc[i] = coef(lm(scale(dScore) ~ scale(predict) + scale(expDiff),
data = study2.demo.comp))[2]
df.comp2$impS.predS.inc[i] = coef(lm(scale(dScoreS) ~ scale(predictS) + scale(expDiffS),
data = study2.demo.comp))[2]
df.comp2$exp.imp[i] = coef(lm(scale(dScore) ~ scale(expDiff),
data = study2.demo.comp))[2]
df.comp2$expS.impS[i] = coef(lm(scale(dScoreS) ~ scale(expDiffS),
data = study2.demo.comp))[2]
}
ggplot(df.comp, aes(x = demo.pred, y = imp.pred)) +
geom_point() +
geom_smooth(method='lm')
cor.test(df.comp$demo.pred, df.comp$imp.pred)
ggplot(df.comp, aes(x = demoS.predS, y = impS.predS)) +
geom_point() +
geom_smooth(method='lm')
ggplot(df.comp2, aes(x = demo.pred, y = imp.pred)) +
geom_point() +
geom_smooth(method='lm')
cor.test(df.comp2$demo.pred, df.comp$imp.pred)
ggplot(df.comp2, aes(x = demoS.predS, y = impS.predS)) +
geom_point() +
geom_smooth(method='lm')
cor.test(df.comp2$demoS.predS, df.comp2$impS.predS)
study1A.demo$demopredS = foreach(i = 1:nrow(study1A.demo), .combine='c') %dopar% {
demo.mod.temp = lm(dScoreS ~ gender + age + politicalid.num + raceethnic + education.num + religionid.num + religion,
data = study1A.demo %>% filter(comp == study1A.demo$comp[i] & session_id != study1A.demo$session_id[i]))
tryCatch({predict(demo.mod.temp, study1A.demo[i,])}, error = function(e) {NA})
}
model1dStudy1A.test = lmer(dScoreS ~ demopredS + (demopredS | session_id) + (demopredS | comp),
data = study1A.demo)
summary(rePCA(model1dStudy1A.test))
model1dStudy1A.test = lmer(dScoreS ~ demopredS + (demopredS || session_id) + (demopredS | comp),
data = study1A.demo)
summary(rePCA(model1dStudy1A.test))
summary(model1dStudy1A.test)
summary(rePCA(model1dStudy1A.test))
model1dStudy1A.test = lmer(dScoreS ~ demopredS + (1 | session_id) + (demopredS | comp),
data = study1A.demo)
model1dStudy1A.test = lmer(dScoreS ~ demopredS + (0 + demopredS | session_id) + (demopredS | comp),
data = study1A.demo)
summary(rePCA(model1dStudy1A.test))
summary(model1dStudy1A.test)
comps1A = unique(study1A.demo$comp)
df.comp1A = data.frame(comps = comps1A,
imp.pred = numeric(length(comps1A)),
imp.pred.inc = numeric(length(comps1A)),
demo.pred = numeric(length(comps1A)),
demo.pred.p = numeric(length(comps1A)))
for (i in 1:nrow(df.comp1A)) {
study1A.demo.comp = study1A.demo %>%
filter(comp == df.comp1A$comps[i])
df.comp1A$demo.pred[i] = coef(lm(scale(dScore) ~ scale(demopred),
data = study1A.demo.comp))[2]
df.comp1A$demo.pred.p[i] = summary(lm(scale(dScore) ~ scale(demopred),
data = study1A.demo.comp))$coefficients[2,4]
df.comp1A$imp.pred[i] = coef(lm(scale(dScore) ~ scale(predict),
data = study1A.demo.comp))[2]
df.comp1A$imp.pred.inc[i] = coef(lm(scale(dScore) ~ scale(predict) + scale(expDiff),
data = study1A.demo.comp))[2]
df.comp1A$exp.imp[i] = coef(lm(scale(dScore) ~ scale(expDiff),
data = study1A.demo.comp))[2]
}
df.comp1A
study1B.demo$demopredS = foreach(i = 1:nrow(study1B.demo), .combine='c') %dopar% {
demo.mod.temp = lm(dScoreS ~ gender + age + politicalid.num + raceethnic + education.num + religionid.num + religion,
data = study1B.demo %>% filter(comp == study1B.demo$comp[i] & session_id != study1B.demo$session_id[i]))
tryCatch({predict(demo.mod.temp, study1B.demo[i,])}, error = function(e) {NA})
}
model1dStudy1B.test = lmer(dScoreS ~ demopredS + (0 + demopredS | session_id) + (demopredS | comp),
data = study1B.demo)
summary(model1dStudy1B.test)
summary(model1dStudy1B)
summary(model1dStudy1B.test)
study2.demo$demopredS = foreach(i = 1:nrow(study2.demo), .combine='c') %dopar% {
demo.mod.temp = lm(dScoreS ~ gender + age + politicalid.num + raceethnic + education.num + religionid.num + religion,
data = study2.demo %>% filter(comp == study2.demo$comp[i] & session_id != study2.demo$session_id[i]))
tryCatch({predict(demo.mod.temp, study2.demo[i,])}, error = function(e) {NA})
}
comps2 = unique(study2.demo$comp)
df.comp2 = data.frame(comps = comps2,
imp.pred = numeric(length(comps2)),
imp.pred.inc = numeric(length(comps2)),
demo.pred = numeric(length(comps2)),
demo.pred.p = numeric(length(comps2)))
for (i in 1:nrow(df.comp2)) {
study2.demo.comp = study2.demo %>%
filter(comp == df.comp2$comps[i])
df.comp2$demo.pred[i] = coef(lm(scale(dScore) ~ scale(demopred),
data = study2.demo.comp))[2]
df.comp2$demoS.predS[i] = coef(lm(scale(dScoreS) ~ scale(demopredS),
data = study2.demo.comp))[2]
df.comp2$demo.pred.p[i] = summary(lm(scale(dScore) ~ scale(demopred),
data = study2.demo.comp))$coefficients[2,4]
df.comp2$demoS.predS.p[i] = summary(lm(scale(dScoreS) ~ scale(demopredS),
data = study2.demo.comp))$coefficients[2,4]
df.comp2$imp.pred[i] = coef(lm(scale(dScore) ~ scale(predict),
data = study2.demo.comp))[2]
df.comp2$impS.predS[i] = coef(lm(scale(dScoreS) ~ scale(predictS),
data = study2.demo.comp))[2]
df.comp2$imp.pred.inc[i] = coef(lm(scale(dScore) ~ scale(predict) + scale(expDiff),
data = study2.demo.comp))[2]
df.comp2$impS.predS.inc[i] = coef(lm(scale(dScoreS) ~ scale(predictS) + scale(expDiffS),
data = study2.demo.comp))[2]
df.comp2$exp.imp[i] = coef(lm(scale(dScore) ~ scale(expDiff),
data = study2.demo.comp))[2]
df.comp2$expS.impS[i] = coef(lm(scale(dScoreS) ~ scale(expDiffS),
data = study2.demo.comp))[2]
}
ggplot(df.comp2, aes(x = demo.pred, y = imp.pred)) +
geom_point() +
geom_smooth(method='lm')
cor.test(df.comp2$demo.pred, df.comp$imp.pred)
ggplot(df.comp2, aes(x = demoS.predS, y = impS.predS)) +
geom_point() +
geom_smooth(method='lm')
cor.test(df.comp2$demoS.predS, df.comp2$impS.predS)
cor.test(df.comp$exp.imp, df.comp$imp.pred)
cor.test(df.comp$expS.impS, df.comp$impS.predS)
cor.test(df.comp2$expS.impS, df.comp$impS.predS)
cor.test(df.comp2$exp.imp, df.comp2$imp.pred)
cor.test(df.comp2$expS.impS, df.comp2$impS.predS)
cor.test(df.comp2$demoS.predS, df.comp2$impS.predS)
cor.test(df.comp2$demo.pred, df.comp$imp.pred)
cor.test(df.comp2$demoS.predS, df.comp2$impS.predS)
study3.demo$demopred = foreach(i = 1:nrow(study3.demo), .combine='c') %dopar% {
demo.mod.temp = lm(dScore ~ gender + age + politicalid.num + raceethnic + education.num + religionid.num + religion,
data = study3.demo %>% filter(comp == study3.demo$comp[i] & session_id != study3.demo$session_id[i]))
tryCatch({predict(demo.mod.temp, study3.demo[i,])}, error = function(e) {NA})
}
study3.demo$demopredS = foreach(i = 1:nrow(study3.demo), .combine='c') %dopar% {
demo.mod.temp = lm(dScoreS ~ gender + age + politicalid.num + raceethnic + education.num + religionid.num + religion,
data = study3.demo %>% filter(comp == study3.demo$comp[i] & session_id != study3.demo$session_id[i]))
tryCatch({predict(demo.mod.temp, study3.demo[i,])}, error = function(e) {NA})
}
summary(model1dStudy1A)
summary(model1Study1A)
model1eStudy1A <- lmer(dScoreS ~ predictS + demopred + (0 + predictS | session_id) + (predictS | comp),
data = study1A)
model1eStudy1A <- lmer(dScoreS ~ predictS + demopred + (0 + predictS | session_id) + (predictS | comp),
data = study1A.demo)
summary(rePCA(model1eStudy1A))
model1eStudy1A <- lmer(dScoreS ~ predictS + demopred + (0 + predictS | session_id) + (predictS || comp),
data = study1A.demo)
model1eStudy1A <- lmer(dScoreS ~ predictS + demopred + (0 + predictS | session_id) + (1 | comp),
data = study1A.demo)
summary(model1eStudy1A)
summary(model1dStudy1A)
summary(model1eStudy1A)
model1dStudy1A.test = lmer(dScoreS ~ demopredS + (0 + demopredS | session_id) + (demopredS | comp),
data = study1A.demo)
summary(model1dStudy1A.test)
model1dStudy1A.test = lmer(dScoreS ~ demopred + (0 + demopred | session_id) + (demopred | comp),
data = study1A.demo)
summary(model1dStudy1A.test)
model1eStudy1A <- lmer(dScoreS ~ predictS + demopredS + (0 + predictS + demopredS + | session_id) + (demopredS | comp),
data = study1A.demo)
model1eStudy1A <- lmer(dScoreS ~ predictS + demopredS + (0 + predictS + demopredS | session_id) + (demopredS | comp),
data = study1A.demo)
summary(rePCA(model1eStudy1A))
summary(model1eStudy1A)
model1fStudy1A <- lmer(predictS ~ dScoreS + demopredS + expDiffS + (0 + predictS + demopredS + expDiffS | session_id) + (demopredS + expDiffS | comp),
data = study1A.demo)
model1fStudy1A <- lmer(predictS ~ dScoreS + demopredS + expDiffS + (0 + predictS + demopredS + expDiffS || session_id) + (demopredS + expDiffS || comp),
data = study1A.demo)
model1fStudy1A <- lmer(predictS ~ dScoreS + demopredS + (0 + predictS + demopredS | session_id) + (demopredS | comp),
data = study1A.demo)
model1fStudy1A <- lmer(predictS ~ dScoreS + demopredS + expDiffS + (0 + dScoreS + demopredS + expDiffS || session_id) + (dScoreS + demopredS + expDiffS || comp),
data = study1A.demo)
summary(model1fStudy1A)
model1fStudy1A <- lmer(predictS ~ dScoreS + demopredS + expDiffS + (0 + dScoreS + demopredS + expDiffS || session_id) + (demopredS || comp),
data = study1A.demo)
summary(model1fStudy1A)
model1dStudy1A.test = lmer(dScoreS ~ demopred + (0 + demopred | session_id) + (demopred | comp),
data = study1A.demo)
summary(model1dStudy1A.test)
save.image('analysis.rdata')
load("/Users/adam/Me/Psychology/Projects/implicit-predicting/osf-revision/analysis.rdata")
summary(rePCA(model2Study4))
round(summary(model2Study4.refit1)$coefficients, 4)
require(car)
linearHypothesis(model2Study4.refit1, "predictOrigS - predictS = 0")
rm(list=ls())
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v4_movies/real1/analysis_bayes.rdata")
df.demo.filt$norm.actual
df.demo.filt$norm.model
mean(df.demo.filt$norm.model.fac == 'Full')
mean(df.demo.filt$norm.model.fac == 'BinWtsAtts')
mean(df.demo.filt$norm.model.fac == 'BinAtts')
mean(df.demo.filt$norm.model.fac == 'BinWts')
mean(df.demo.filt$norm.model.fac == df.demo.filt$reported.model.fac)
summary(lm(process.accuracy.model.relprob ~ actual.model.r2 + actual.model.fac, df.demo.filt))
summary(lm(norm.model.relprob ~ actual.model.r2 + actual.model.fac, df.demo.filt))
require(pwr)
install.packages('pwr')
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v4/real1/analysis_bayes.rdata")
summary(lm(scale(weight.accuracy.reported) ~ scale(process.accuracy.model.relprob) + actual.model.fac + scale(actual.model.r2), df.demo.filt))
summary(lm(scale(norm.actual) ~ process.accuracy.model.dichotomized + actual.model.fac + actual.model.r2, data = df.demo.filt))
summary(lm(scale(norm.actual) ~ process.accuracy.model.relprob + actual.model.fac + actual.model.r2, data = df.demo.filt))
summary(lm(scale(norm.actual) ~ scale(process.accuracy.model.relprob) + actual.model.fac + actual.model.r2, data = df.demo.filt))
rm(list=ls())
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v4_movies/real1/analysis_bayes.rdata")
summary(lm(scale(norm.actual) ~ scale(process.accuracy.model.relprob) + actual.model.fac + actual.model.r2, data = df.demo.filt))
load("/Users/adam/Me/Psychology/Projects/implicit-predicting/osf-revision/analysis.rdata")
if (!require(dplyr)) {install.packages("dplyr"); require(dplyr)}
if (!require(forcats)) {install.packages("forcats"); require(forcats)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(lmerTest)) {install.packages("lmerTest"); require(lmerTest)}
if (!require(magrittr)) {install.packages("magrittr"); require(magrittr)}
if (!require(mediation)) {install.packages("mediation"); require(mediation)}
if (!require(MuMIn)) {install.packages("MuMIn"); require(MuMIn)}
if (!require(optimx)) {install.packages("optimx"); require(optimx)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(QuantPsyc)) {install.packages("QuantPsyc"); require(QuantPsyc)}
if (!require(r2glmm)) {install.packages("r2glmm"); require(r2glmm)}
if (!require(foreach)) {install.packages("foreach"); require(foreach)}
if (!require(doParallel)) {install.packages("doParallel"); require(doParallel)}
if (!require(car)) {install.packages("car"); require(car)}
summary(lm(imp.pred ~ demo.pred, df.comp %>% mutate(demo.pred = scale(demo.pred),
imp.pred = scale(imp.pred))))
summary(lm(imp.pred.inc ~ demo.pred, df.comp %>% mutate(demo.pred = scale(demo.pred),
imp.pred.inc = scale(imp.pred.inc))))
summary(lm(imp.pred ~ demo.pred, df.comp %>% mutate(demo.pred = scale(demo.pred),
imp.pred = scale(imp.pred))))
summary(lm(imp.pred ~ demo.pred, study3B.demo.comp %>% mutate(demo.pred = scale(demo.pred),
imp.pred = scale(imp.pred))))
comps = unique(study3B.demo$comp)
df.comp = data.frame(comps = comps,
imp.pred = numeric(length(comps)),
imp.pred.inc = numeric(length(comps)),
demo.pred = numeric(length(comps)),
demo.pred.p = numeric(length(comps)))
for (i in 1:nrow(df.comp)) {
study3B.demo.comp = study3B.demo %>%
filter(comp == df.comp$comps[i])
df.comp$demo.pred[i] = coef(lm(scale(ampScore) ~ scale(demopred),
data = study3B.demo.comp))[2]
df.comp$demo.pred.p[i] = summary(lm(scale(ampScore) ~ scale(demopred),
data = study3B.demo.comp))$coefficients[2,4]
df.comp$imp.pred[i] = coef(lm(scale(ampScore) ~ scale(predict),
data = study3B.demo.comp))[2]
df.comp$imp.pred.inc[i] = coef(lm(scale(ampScore) ~ scale(predict) + scale(expDiffT1) + scale(expDiffT2),
data = study3B.demo.comp))[2]
}
summary(lm(imp.pred ~ demo.pred, df.comp %>% mutate(demo.pred = scale(demo.pred),
imp.pred = scale(imp.pred))))
summary(lm(imp.pred.inc ~ demo.pred, df.comp %>% mutate(demo.pred = scale(demo.pred),
imp.pred.inc = scale(imp.pred.inc))))
summary(lm(imp.pred ~ demo.pred, df.comp %>% mutate(demo.pred = scale(demo.pred),
imp.pred = scale(imp.pred))))
summary(lm(imp.pred.inc ~ demo.pred, df.comp %>% mutate(demo.pred = scale(demo.pred),
imp.pred.inc = scale(imp.pred.inc))))
summary(rePCA(model1Study3B.nodemo))
summary(model1Study3B.nodemo)
comps = unique(study3A.demo$comp)
df.comp3 = data.frame(comps = comps,
imp.pred = numeric(length(comps)),
imp.pred.inc = numeric(length(comps)),
demo.pred = numeric(length(comps)),
demo.pred.p = numeric(length(comps)))
for (i in 1:nrow(df.comp3)) {
study3A.demo.comp = study3A.demo %>%
filter(comp == df.comp3$comps[i])
df.comp3$demo.pred[i] = coef(lm(scale(ampScore) ~ scale(demopred),
data = study3A.demo.comp))[2]
df.comp3$demo.pred.p[i] = summary(lm(scale(ampScore) ~ scale(demopred),
data = study3A.demo.comp))$coefficients[2,4]
df.comp3$imp.pred[i] = coef(lm(scale(ampScore) ~ scale(predict),
data = study3A.demo.comp))[2]
df.comp3$imp.pred.inc[i] = coef(lm(scale(ampScore) ~ scale(predict) + scale(expDiff),
data = study3A.demo.comp))[2]
}
summary(lm(scale(imp.pred) ~ scale(demo.pred), df.comp3))
summary(lm(scale(imp.pred.inc) ~ scale(demo.pred), df.comp3))
summary(lm(scale(imp.pred) ~ scale(demo.pred), df.comp3))
# Setup -------------------------------------------------------------------
require(groundhog)
# Setup -------------------------------------------------------------------
require(groundhog)
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'jsonlite', 'combinat', 'effectsize', 'RColorBrewer')
groundhog.library(pkg.names, '2023-03-13')
groundhog.library(pkg.names, '2023-03-11')
install_github('andreacirilloac/updateR')
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('andreacirilloac/updateR')
library(devtools)
install_github('andreacirilloac/updateR')
updateR(admin_password = 'mSant3ria_11')
library(updateR)
library(updateR)
updateR(admin_password = 'mSant3ria_11')
updateR()
library(updateR)
updateR()
require(dplyr)
require(digest)
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data-analysis/home-fixed/analysis_output.rdata")
df.demo.filt$cv_result
# Setup -------------------------------------------------------------------
require(groundhog)
pkg.names = c('rstan', 'ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'jsonlite', 'combinat', 'effectsize', 'RColorBrewer', 'scales',
'bridgesampling', 'iterpc', 'foreach', 'doParallel', 'matricks','loo')
groundhog.library(pkg.names, '2023-04-01')
groundhog.library(pkg.names, '2023-04-01')
# Setup -------------------------------------------------------------------
require(groundhog)
groundhog.library(pkg.names, '2023-04-01')
rm(list=ls())
require(groundhog)
pkg.names = c('ggplot2', 'lme4', 'lmerTest', 'tidyverse', 'jsonlite', 'combinat', 'effectsize', 'RColorBrewer', 'scales')
#groundhog.library(pkg.names, '2023-03-11')
lapply(pkg.names, require, character.only = TRUE)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=25, colour = "black"),
axis.title=element_text(size=30, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
get.ci = function(x) {return(c(mean(x,na.rm = T) - 1.96*se(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se(x)))}
get.ci.prop = function(x) {return(c(mean(x,na.rm = T) - 1.96*se.prop(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se.prop(x)))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(gsub('\\[|\\]','',x),',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data-analysis/home-fixed/analysis_output.rdata")
source("model-fitting/model-fitting.R")
stan_model_full <- stan_model("model-fitting/stan-program.stan")
stan_model_binwts <- stan_model("model-fitting/stan-program-binwts.stan")
numSubj = length(subjlist)
option_diffs_allsubj = vector(mode = 'list', numSubj)
for (subj in 1:numSubj) {
option_diffs_allsubj[[subj]] = t(as.matrix(df.s1 %>%
filter(subject == subjlist[subj]) %>%
select(all_of(atts.opt.scaled.diff))))
}
option_diffs_touse = option_diffs_allsubj
save(option_diffs_allsubj, file = 'model-fitting/option_diffs.rdata') # save for simulations
choices_touse = vector(mode = 'list', numSubj)
for (subj in 1:numSubj) {
choices_touse[[subj]] = df.s1[df.s1$subject == subjlist[subj],'choice']
}
## FIT FULL
stan_results_full = doFitting(stan_model_full, option_diffs_touse, choices_touse, 0, 0)
stan_results_binatts <- doFitting(stan_model_full, option_diffs_touse, choices_touse, 1, 0)
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
stan_results_binattswts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 1, 1, all_combinations_binwts)
Q
stan_results_full[[290]]
stan_results_full[[290]][[1]]
View(stan_results_full)
numSubj = 3#length(subjlist)
option_diffs_allsubj = vector(mode = 'list', numSubj)
for (subj in 1:numSubj) {
option_diffs_allsubj[[subj]] = t(as.matrix(df.s1 %>%
filter(subject == subjlist[subj]) %>%
select(all_of(atts.opt.scaled.diff))))
}
option_diffs_touse = option_diffs_allsubj
choices_touse = vector(mode = 'list', numSubj)
for (subj in 1:numSubj) {
choices_touse[[subj]] = df.s1[df.s1$subject == subjlist[subj],'choice']
}
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
begin = Sys.time()
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
Sys.time() - begin
stan_results_binwts[[1]]
stan_results_binwts[[2]]
params_1 = stan_results_binwts[[2]]
params_1 = stan_results_binwts[[3]]
params_1 = stan_results_binwts[[2]]
stan_results_binwts[[3]]
lme_1 = stan_results_binwts[[3]]
stan_model_binwts <- stan_model("model-fitting/stan-program-binwts.stan")
begin = Sys.time()
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
Sys.time() - begin
begin = Sys.time()
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
Sys.time() - begin
stan_model_binwts <- stan_model("model-fitting/stan-program-binwts.stan")
begin = Sys.time()
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
Sys.time() - begin
stan_model_binwts <- stan_model("model-fitting/stan-program-binwts.stan")
begin = Sys.time()
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
Sys.time() - begin
2.2*100/60
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
stan_results_binattswts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 1, 1, all_combinations_binwts)
stan_results_oneatt <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_singleatt)
stan_results_oneattbinatts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 1, 1, all_combinations_singleatt)
save(numSubj, numAtts,
option_diffs_touse, choices_touse,
stan.seed, numChains, numIter,
generateChoices, doFitting, get_all_diagnostics,
all_combinations_binwts, all_combinations_singleatt,
stan_results_full, stan_results_binatts, stan_results_binwts, stan_results_binattswts, stan_results_oneatt, stan_results_oneattbinatts,
file = paste0(filepath, 'modeling-output/modelfitting_output.rdata'))
stan_model_full <- stan_model("model-fitting/stan-program.stan")
stan_model_binwts <- stan_model("model-fitting/stan-program-binwts.stan")
numSubj = length(subjlist)
option_diffs_allsubj = vector(mode = 'list', numSubj)
for (subj in 1:numSubj) {
option_diffs_allsubj[[subj]] = t(as.matrix(df.s1 %>%
filter(subject == subjlist[subj]) %>%
select(all_of(atts.opt.scaled.diff))))
}
option_diffs_touse = option_diffs_allsubj
save(option_diffs_allsubj, file = 'model-fitting/option_diffs.rdata') # save for simulations
choices_touse = vector(mode = 'list', numSubj)
for (subj in 1:numSubj) {
choices_touse[[subj]] = df.s1[df.s1$subject == subjlist[subj],'choice']
}
numSubj
length(stan_results_full)
length(stan_results_binatts)
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
stan_results_binattswts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 1, 1, all_combinations_binwts)
stan_results_binatts[[1]]
stan_results_binwts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_binwts)
stan_results_binattswts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 1, 1, all_combinations_binwts)
stan_results_oneatt <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 0, 1, all_combinations_singleatt)
stan_results_oneattbinatts <- doFitting(stan_model_binwts, option_diffs_touse, choices_touse, 1, 1, all_combinations_singleatt)
save(numSubj, numAtts,
option_diffs_touse, choices_touse,
stan.seed, numChains, numIter,
generateChoices, doFitting, get_all_diagnostics,
all_combinations_binwts, all_combinations_singleatt,
stan_results_full, stan_results_binatts, stan_results_binwts, stan_results_binattswts, stan_results_oneatt, stan_results_oneattbinatts,
file = paste0(filepath, 'modeling-output/modelfitting_output.rdata'))
stan_results_binwts
length(stan_results_binwts)
length(stan_results_binwtsatts)
length(stan_results_binattswts)
length(stan_results_oneatt)
numSubj
gc()
