df.demo$did_two[i] = F
}
}
exclude.subj = c()
for (subj in subjlist) {
demo.row = df.demo$subject == subj
s1.subj = df.s1.subj$subject == subj
browser.row = df.browser.subj$subject == subj
if (df.demo$instruction_times_median[demo.row] < 2 || # if they took, on average, <2 sec per instruction screen
df.s1.subj$num_trials[s1.subj] != numTrials | # if they didn't complete all the trials
df.demo$attention[demo.row] < 50 | # if they reported themselves as having paid less than 50% attention
df.demo$cc.correct.total[demo.row] < 4 | # if they got fewer than 4/6 comprehension checks correct
(df.demo$did_two[demo.row] & df.demo$which_version_first[demo.row] != version) |
df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0 |
#df.demo$cv_result[demo.row] < .5 |
(any(browser.row) & df.browser.subj$num.blur[df.browser.subj$subject == subj] > 20)) { # if they tabbed away from the experiment more than 20 times
exclude.subj = c(exclude.subj, subj)
}
if (participant_type == 'decider') {
if (df.s1.subj$pct_left[s1.subj] > .8 | # if they chose the left or right option >80% of the time
df.s1.subj$pct_left[s1.subj] < .2) {
exclude.subj = c(exclude.subj, subj)
}
} else {
if (df.s1.subj$pct_correct[s1.subj] < 0.95 |
is.na(df.demo$decider.subj.num[demo.row])) {
exclude.subj = c(exclude.subj, subj)
}
}
}
df.demo$instruction_times_median[demo.row]
df.s1.subj$num_trials[s1.subj] != numTrials
df.demo$attention[demo.row] < 50
df.demo$cc.correct.total[demo.row] < 4
(df.demo$did_two[demo.row] & df.demo$which_version_first[demo.row] != version)
df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0
df.attributes.subj$subject
df.attributes.subj$num_same
df.attributes.subj$subject == subj
which(df.attributes.subj$subject == subj)
df.attributes.subj$num_same[33]
df.s1.subj$num_trials[s1.subj]
subj
df.attributes.subj[33,]
df.demo$decider.subj.num[demo.row]
# Import modeling results ------------------------------------------
# Model-fitting is done in "fit-subjects.R"
if (participant_type == 'decider') {
load(paste0(filepath, 'modeling_output.rdata'))
decider.names = df.demo$subject
decider.nums = df.demo$subject.num
} else { # observer stuff
load(paste0(filepath_decider, 'modeling_output.rdata'))
## Load the subject mapping data (which should have been saved from the decider analysis)
df.map = read.csv(paste0(filepath, 'observer_mapping.csv'), header = F)
colnames(df.map) = c('subject', 'subject.num')
decider.names = df.map$subject
decider.nums = df.map$subject.num
}
fitting_results[[47]]
fitting_results[[47]][[1]]
fitting_results[[47]][[1]][[1]]
model_weights[[33]][1,]
model_weights[[33]][2,]
df.demo$subject.num[33]
df.demo$subject[33]
View(df.attributes)
# get subject-level accuracies
df.attributes.subj = df.attributes %>% group_by(subject) %>%
summarize(num_same = sum(same & (reported.weight.graded > .1)),
weight.accuracy.reported = cor(fitted.weight.reported, reported.weight.reported.signed),
weight.accuracy.reported.rank = cor(fitted.weight.reported, reported.weight.reported.signed, method = 'kendall'),
weight.accuracy.best = cor(fitted.weight.actual, reported.weight.actual.signed),
weight.accuracy.best.rank = cor(fitted.weight.actual, reported.weight.actual.signed, method = 'kendall'),
weight.accuracy.averaged = cor(fitted.weight.averaged, reported.weight.averaged.signed),
weight.accuracy.averaged.rank = cor(fitted.weight.averaged, reported.weight.averaged.signed, method = 'kendall')
)
df.attributes.subj$num_same[33]
View(df.ant.subj)
View(df.attributes)
i = 290
cur.att = df.attributes$attribute[i]
subj = df.attributes$subject[i]
cur.scale = ifelse(task_variant == 'movie', movie_scale,df.attributes$scale[i])
rows.demo = as.character(df.demo$subject) == as.character(subj)
rows.s2.wad = as.character(df.s2$subject) == as.character(subj) & df.s2$attribute == cur.att & df.s2$type == 'wad_att_rating'
rows.s2.ew = as.character(df.s2$subject) == as.character(subj) & df.s2$attribute == cur.att & df.s2$type == 'ew_att_rating'
rows.s2.lex = as.character(df.s2$subject) == as.character(subj) & df.s2$attribute == cur.att & df.s2$type == 'lex_att_rating'
rows.s2.direction = as.character(df.s2$subject) == as.character(subj) & df.s2$attribute == cur.att & df.s2$type == 'direction'
rows.s2.direction
any(rows.s2.direction)
View(df.s2)
# get subject-level accuracies
df.attributes.subj = df.attributes %>% group_by(subject) %>%
summarize(num_same = sum(same & (reported.weight.graded > .1), na.rm = T),
weight.accuracy.reported = cor(fitted.weight.reported, reported.weight.reported.signed),
weight.accuracy.reported.rank = cor(fitted.weight.reported, reported.weight.reported.signed, method = 'kendall'),
weight.accuracy.best = cor(fitted.weight.actual, reported.weight.actual.signed),
weight.accuracy.best.rank = cor(fitted.weight.actual, reported.weight.actual.signed, method = 'kendall'),
weight.accuracy.averaged = cor(fitted.weight.averaged, reported.weight.averaged.signed),
weight.accuracy.averaged.rank = cor(fitted.weight.averaged, reported.weight.averaged.signed, method = 'kendall')
)
df.attributes.subj$num_same[33]
cols.to.xfer = colnames(df.attributes.subj %>% select(!subject))
for (i in 1:nrow(df.demo)) {
att.row = df.attributes.subj$subject == df.demo$subject[i]
for (cur.col in cols.to.xfer) {
df.demo[i,cur.col] = df.attributes.subj[att.row, cur.col]
}
}
# Normative alignment stuff
df.demo = df.demo %>% mutate(
norm.h1.actual.div = abs(actual.h1.prob - norm.h1),
norm.h2.actual.div = abs(actual.h2.prob - norm.h2),
norm.h3.actual.div = abs(actual.h3.prob - norm.h3),
norm.h1.actual.dichotomized = norm.h1.dichotomized == actual.h1.prob.dichotomized,
norm.h2.actual.dichotomized = norm.h2.dichotomized == actual.h2.prob.dichotomized,
norm.h3.actual.dichotomized = norm.h3.dichotomized == actual.h3.prob.dichotomized) %>%
rowwise() %>% mutate(
norm.actual.div = mean(c(norm.h1.actual.div, norm.h2.actual.div, norm.h3.actual.div)),
norm.actual.dichotomized = mean(c(norm.h1.actual.dichotomized, norm.h2.actual.dichotomized, norm.h3.actual.dichotomized))
)
exclude.subj = c()
for (subj in subjlist) {
demo.row = df.demo$subject == subj
s1.subj = df.s1.subj$subject == subj
browser.row = df.browser.subj$subject == subj
if (df.demo$instruction_times_median[demo.row] < 2 || # if they took, on average, <2 sec per instruction screen
df.s1.subj$num_trials[s1.subj] != numTrials | # if they didn't complete all the trials
df.demo$attention[demo.row] < 50 | # if they reported themselves as having paid less than 50% attention
df.demo$cc.correct.total[demo.row] < 4 | # if they got fewer than 4/6 comprehension checks correct
(df.demo$did_two[demo.row] & df.demo$which_version_first[demo.row] != version) |
df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0 |
#df.demo$cv_result[demo.row] < .5 |
(any(browser.row) & df.browser.subj$num.blur[df.browser.subj$subject == subj] > 20)) { # if they tabbed away from the experiment more than 20 times
exclude.subj = c(exclude.subj, subj)
}
if (participant_type == 'decider') {
if (df.s1.subj$pct_left[s1.subj] > .8 | # if they chose the left or right option >80% of the time
df.s1.subj$pct_left[s1.subj] < .2) {
exclude.subj = c(exclude.subj, subj)
}
} else {
if (df.s1.subj$pct_correct[s1.subj] < 0.95 |
is.na(df.demo$decider.subj.num[demo.row])) {
exclude.subj = c(exclude.subj, subj)
}
}
}
df.demo.filt = df.demo %>% filter(!(subject %in% exclude.subj))
df.s1.filt = df.s1 %>% filter(!(subject %in% exclude.subj))
df.s1.subj.filt = df.s1.subj %>% filter(!(subject %in% exclude.subj))
df.s1.practice.filt = df.s1.practice %>% filter(!(subject %in% exclude.subj))
df.s2.filt = df.s2 %>% filter(!(subject %in% exclude.subj))
df.attributes.filt = df.attributes %>% filter(!(subject %in% exclude.subj))
df.attributes.subj.filt = df.attributes.subj %>% filter(!(subject %in% exclude.subj))
df.cc.filt = df.cc %>% filter(!(subject %in% exclude.subj))
df.cc.subj.filt = df.cc.subj %>% filter(!(subject %in% exclude.subj))
rm(fitting_results)
# Save observer data for comparison with deciders ------------------------------------------------------
# Save observer data to the observer folder
if (participant_type == 'observer') {
df.demo.filt.obs = df.demo.filt
save(df.demo.filt.obs, file = paste0(filepath, 'observer_results.rdata'))
}
save.image(paste0(filepath, 'analysis_output.rdata'))
rm(list = ls()))
rm(list = ls())
load("/Users/adam/Me/Psychology/Projects/ma_choice/git3/data-analysis/home-fixed/analysis_output.rdata")
load(paste0(filepath_observer, 'observer_results.rdata'))
df.demo.filt$type = 'Original'
df.demo.filt.obs$type = 'Observers'
df.demo.filt.both = full_join(df.demo.filt, df.demo.filt.obs)
df.demo.filt.both = df.demo.filt.both %>% mutate(type = factor(type, c('Original', 'Observers'), c('Original', 'Observers')))
df.demo.filt.both.multiatt = df.demo.filt.both %>%
filter(actual.h1.prob.dichotomized == 'Multiple')
### process awareness
## heat map
df.demo.heat.obs = df.demo.filt.obs %>% group_by(reported.model.fac, actual.model.fac) %>%
summarize(num.subj = n())
ggplot(df.demo.heat.obs, aes(x = actual.model.fac, y = reported.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\nSelf-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
df.demo.heat.normed.obs = df.demo.filt.obs %>% group_by(reported.model.fac, actual.model.fac) %>%
summarize(num.subj = n()) %>%
group_by(actual.model.fac) %>%
mutate(num.subj.norm = num.subj / sum(num.subj))
ggplot(df.demo.heat.normed.obs, aes(x = actual.model.fac, y = reported.model.fac,
fill = num.subj.norm)) +
geom_tile() +
geom_text(aes(label = round(num.subj.norm, 2))) +
labs(y = '\nSelf-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
#theme_black() +
scale_x_discrete(labels = c('Rational', 'Binary att vals', 'Binary wts', 'Binary wts +\nbinary att vals', 'Single att', 'Single Att +\nBinary att vals')) +
scale_y_discrete(labels = c('Rational', 'Binary att vals', 'Binary wts', 'Binary wts +\nbinary att vals', 'Single att', 'Single Att +\nBinary att vals')) +
theme_grey(base_size = 12) %+replace%
theme(
# Specify axis options
axis.text.x = element_text(size = 10, color = "white", angle = 45, margin = margin(0, 10, 0, 0)),
axis.text.y = element_text(size = 10, color = "white", margin = margin(0, 10, 0, 0)),
axis.line = element_blank(),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = 12*0.8, color = "white"),
legend.title = element_text(size = 12*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = 12*0.8, color = "white"),
strip.text.y = element_text(size = 12*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = 12*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
mean.orig = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Original'])
se.orig = se(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Original'])
mean.obs = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Observers'])
se.obs = se(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Observers'])
ggplot(df.demo.filt.both, aes(x = process.accuracy.model.relprob, fill = type, group = type)) +
geom_histogram(color = 'white', alpha = .7, bins = 25, position = position_identity()) +
labs(x = "\nReported model BF",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean.orig, linetype = 1, color = '#e3211c') +
geom_vline(xintercept = mean.orig - se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.orig + se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.obs, linetype = 1, color = '#377eb8') +
geom_vline(xintercept = mean.obs - se.obs, linetype = 'dashed', color = '#377eb8') +
geom_vline(xintercept = mean.obs + se.obs, linetype = 'dashed', color = '#377eb8') +
scale_fill_brewer(palette = 'Set1') +
theme(legend.title = element_blank())
mean.obs = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Observers'])
mean.obs
df.demo.filt.obs$process.accuracy.model.relprob
mean.orig = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Original'], na.rm = T)
se.orig = se(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Original'], na.rm = T)
mean.orig = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Original'], na.rm = T)
se.orig = se(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Original'])
mean.obs = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Observers'])
se.obs = se(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Observers'])
ggplot(df.demo.filt.both, aes(x = process.accuracy.model.relprob, fill = type, group = type)) +
geom_histogram(color = 'white', alpha = .7, bins = 25, position = position_identity()) +
labs(x = "\nReported model BF",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean.orig, linetype = 1, color = '#e3211c') +
geom_vline(xintercept = mean.orig - se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.orig + se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.obs, linetype = 1, color = '#377eb8') +
geom_vline(xintercept = mean.obs - se.obs, linetype = 'dashed', color = '#377eb8') +
geom_vline(xintercept = mean.obs + se.obs, linetype = 'dashed', color = '#377eb8') +
scale_fill_brewer(palette = 'Set1') +
theme(legend.title = element_blank())
mean.obs = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Observers'])
mean.orig = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Original'], na.rm = T)
se.orig = se(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Original'])
mean.obs = mean(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Observers'], na.rm = T)
se.obs = se(df.demo.filt.both$process.accuracy.model.relprob[df.demo.filt.both$type == 'Observers'])
ggplot(df.demo.filt.both, aes(x = process.accuracy.model.relprob, fill = type, group = type)) +
geom_histogram(color = 'white', alpha = .7, bins = 25, position = position_identity()) +
labs(x = "\nReported model BF",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean.orig, linetype = 1, color = '#e3211c') +
geom_vline(xintercept = mean.orig - se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.orig + se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.obs, linetype = 1, color = '#377eb8') +
geom_vline(xintercept = mean.obs - se.obs, linetype = 'dashed', color = '#377eb8') +
geom_vline(xintercept = mean.obs + se.obs, linetype = 'dashed', color = '#377eb8') +
scale_fill_brewer(palette = 'Set1') +
theme(legend.title = element_blank())
summary(lm(scale(process.accuracy.model.relprob) ~ type, df.demo.filt.both))
mean.orig = mean(df.demo.filt.both.multiatt$process.accuracy.div[df.demo.filt.both.multiatt$type == 'Original'], na.rm = T)
se.orig = se(df.demo.filt.both.multiatt$process.accuracy.div[df.demo.filt.both.multiatt$type == 'Original'])
mean.obs = mean(df.demo.filt.both.multiatt$process.accuracy.div[df.demo.filt.both.multiatt$type == 'Observers'], na.rm = T)
se.obs = se(df.demo.filt.both.multiatt$process.accuracy.div[df.demo.filt.both.multiatt$type == 'Observers'])
ggplot(df.demo.filt.both.multiatt, aes(x = process.accuracy.div, fill = type, group = type)) +
geom_histogram(color = 'white', alpha = .7, bins = 25, position = position_identity()) +
labs(x = "\nHeuristic error",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean.orig, linetype = 1, color = '#e3211c') +
geom_vline(xintercept = mean.orig - se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.orig + se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.obs, linetype = 1, color = '#377eb8') +
geom_vline(xintercept = mean.obs - se.obs, linetype = 'dashed', color = '#377eb8') +
geom_vline(xintercept = mean.obs + se.obs, linetype = 'dashed', color = '#377eb8') +
scale_fill_brewer(palette = 'Set1') +
theme(legend.title = element_blank())
mean.orig = mean(df.demo.filt.both$process.accuracy.div[df.demo.filt.both.multiatt$type == 'Original'], na.rm = T)
se.orig = se(df.demo.filt.both$process.accuracy.div[df.demo.filt.both.multiatt$type == 'Original'])
mean.obs = mean(df.demo.filt.both$process.accuracy.div[df.demo.filt.both.multiatt$type == 'Observers'], na.rm = T)
se.obs = se(df.demo.filt.both$process.accuracy.div[df.demo.filt.both.multiatt$type == 'Observers'])
ggplot(df.demo.filt.both, aes(x = process.accuracy.div, fill = type, group = type)) +
geom_histogram(color = 'white', alpha = .7, bins = 25, position = position_identity()) +
labs(x = "\nHeuristic error",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean.orig, linetype = 1, color = '#e3211c') +
geom_vline(xintercept = mean.orig - se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.orig + se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.obs, linetype = 1, color = '#377eb8') +
geom_vline(xintercept = mean.obs - se.obs, linetype = 'dashed', color = '#377eb8') +
geom_vline(xintercept = mean.obs + se.obs, linetype = 'dashed', color = '#377eb8') +
scale_fill_brewer(palette = 'Set1') +
theme(legend.title = element_blank())
mean.orig
mean.orig = mean(df.demo.filt.both$process.accuracy.div[df.demo.filt.both$type == 'Original'], na.rm = T)
se.orig = se(df.demo.filt.both$process.accuracy.div[df.demo.filt.both$type == 'Original'])
mean.obs = mean(df.demo.filt.both$process.accuracy.div[df.demo.filt.both$type == 'Observers'], na.rm = T)
se.obs = se(df.demo.filt.both$process.accuracy.div[df.demo.filt.both$type == 'Observers'])
ggplot(df.demo.filt.both, aes(x = process.accuracy.div, fill = type, group = type)) +
geom_histogram(color = 'white', alpha = .7, bins = 25, position = position_identity()) +
labs(x = "\nHeuristic error",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean.orig, linetype = 1, color = '#e3211c') +
geom_vline(xintercept = mean.orig - se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.orig + se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.obs, linetype = 1, color = '#377eb8') +
geom_vline(xintercept = mean.obs - se.obs, linetype = 'dashed', color = '#377eb8') +
geom_vline(xintercept = mean.obs + se.obs, linetype = 'dashed', color = '#377eb8') +
scale_fill_brewer(palette = 'Set1') +
theme(legend.title = element_blank())
summary(lm(scale(process.accuracy.div) ~ type, df.demo.filt.both))
t.test(df.demo.filt$process.accuracy.div,
df.demo.filt.obs$process.accuracy.div)
# continuous version
ggplot(df.demo.filt.both, aes(x = actual.h1.prob, y = reported.h1, color = type, group = type)) +
geom_point() +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nProcess Question 1:\nModel-fitted probability of using\nmultiple atts (vs. a single att)',
y = 'Reported probability of using\nmultiple atts (vs. a single att)') +
scale_color_brewer(palette = 'Set1')
summary(lm(scale(reported.h1) ~ scale(actual.h1.prob) * type, df.demo.filt.both))
summary(lm(scale(reported.h1) ~ scale(actual.h1.prob) * type, df.demo.filt.both))
ggplot(df.demo.filt.both, aes(x = actual.h2.prob, y = reported.h2, color = type, group = type)) +
geom_point() +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nProcess Question 2:\nModel-fitted probability of using\ngraded weights (vs. binary weights)',
y = 'Reported probability of using\ngraded weights (vs. binary weights)') +
scale_color_brewer(palette = 'Set1')
summary(lm(scale(reported.h2) ~ scale(actual.h2.prob) * type, df.demo.filt.both))
ggplot(df.demo.filt.both, aes(x = actual.h3.prob, y = reported.h3, color = type, group = type)) +
geom_point() +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nProcess Question 3:\nModel-fitted probability of using\ngraded att values (vs. binary att values)',
y = 'Reported probability of using\ngraded att values (vs. binary att values)') +
scale_color_brewer(palette = 'Set1')
summary(lm(scale(reported.h3) ~ scale(actual.h3.prob) * type, df.demo.filt.both))
# dichotomized version
h1.grouped = df.demo.filt.both %>% group_by(type, actual.h1.prob.dichotomized) %>%
summarize(Multiple = mean(reported.h1.dichotomized == 'Multiple'),
Multiple.se = se.prop(reported.h1.dichotomized == 'Multiple'))
ggplot(h1.grouped, aes(x = actual.h1.prob.dichotomized, y = Multiple, group = type, fill = type)) +
geom_col(position = dodge, color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, position = dodge, color = 'white') +
theme_black() +
labs(x = '\nProcess Question 1:\nModel-fitting said multiple atts?',
y = '% reporting using multiple atts',
fill = '') +
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed') +
scale_fill_brewer(palette = 'Set1') +
scale_x_discrete(labels = c('False', 'True'))
# combine all 3 together
df.questions1 = df.demo.filt.both %>%
select(subject, type, reported.h1, reported.h2, reported.h3) %>%
rename(q1 = reported.h1, q2 = reported.h2, q3 = reported.h3) %>%
pivot_longer(!c(subject, type), names_to = 'question', values_to = 'reported')
df.questions2 = df.demo.filt.both %>%
select(subject, type, actual.h1.prob, actual.h2.prob, actual.h3.prob) %>%
pivot_longer(!c(subject, type), values_to = 'prob')
df.questions4 = df.demo.filt.both %>%
select(subject, type, actual.h1.prob.dichotomized, actual.h2.prob.dichotomized, actual.h3.prob.dichotomized) %>%
pivot_longer(!c(subject, type), values_to = 'best.family')
df.questions = df.questions1
df.questions$prob = df.questions2$prob
df.questions$chosen = df.questions3$chosen
df.questions$best.family = df.questions4$best.family
ggplot(df.questions, aes(x = prob, y = reported, color = type, group = type)) +
geom_point() +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nProb. of using\nheuristic',
y = 'Reported probability of\nusing heuristic') +
scale_color_brewer(palette = 'Set1')
m1 = lmer(scale(reported) ~ scale(prob)*type + (scale(prob) | subject), df.questions)
summary(rePCA(m1))
m2 = lmer(scale(reported) ~ scale(prob)*type + (1 | subject), df.questions)
summary(m2)
q.grouped.rev = df.questions %>% group_by(type, best.family) %>%
summarize(chosen.m = mean(chosen),
chosen.se = se.prop(chosen))
# % chosen correctly
features.graph = df.demo.filt.both %>% select(subject,type,process.accuracy.h1.dichotomized, process.accuracy.h2.dichotomized, process.accuracy.h3.dichotomized, process.accuracy.model.dichotomized) %>%
pivot_longer(!c(subject,type)) %>%
group_by(type, name) %>%
summarize(val = mean(value,na.rm=T),
val.se = se(value)) %>%
mutate(name = factor(name, c('process.accuracy.h1.dichotomized', 'process.accuracy.h2.dichotomized', 'process.accuracy.h3.dichotomized', 'process.accuracy.model.dichotomized')))
ggplot(features.graph %>% filter(name == 'process.accuracy.model.dichotomized'), aes(x = name, y = val, fill = type, group = type)) +
geom_col(color='white', position = dodge) +
geom_errorbar(aes(ymin = val - val.se, ymax = val + val.se), width = .2, color = 'white', position = dodge) +
geom_segment(x = 0, y = .5, xend = 3.5, yend = 0.5, color = 'white', linetype = 'dashed') +
geom_segment(x = 3.5, y = 1/6, xend = 4.5, yend = 1/6, color = 'white', linetype = 'dashed') +
theme_black() +
labs(x = '', y = '% reporting correct\nset of heuristics') +
#scale_x_discrete(labels = c('Q1\n(one vs.\nmultiple attributes)', 'Q2\n(binary vs.\ngraded weights)', 'Q3\n(binary vs.\ngraded attributes)', 'Overall model')) +
scale_x_discrete(labels = c('')) +
scale_fill_brewer(palette = 'Set1')
summary(glm(process.accuracy.model.dichotomized ~ type, df.demo.filt.both, family = 'binomial'))
mean.orig = mean(df.demo.filt.both$weight.accuracy.averaged[df.demo.filt.both$type == 'Original'], na.rm = T)
se.orig = se(df.demo.filt.both$weight.accuracy.averaged[df.demo.filt.both$type == 'Original'])
mean.obs = mean(df.demo.filt.both$weight.accuracy.averaged[df.demo.filt.both$type == 'Observers'], na.rm = T)
se.obs = se(df.demo.filt.both$weight.accuracy.averaged[df.demo.filt.both$type == 'Observers'])
ggplot(df.demo.filt.both, aes(x = weight.accuracy.averaged, fill = type, group = type)) +
geom_histogram(color = 'white', alpha = .7, bins = 25, position = position_identity()) +
geom_vline(xintercept = mean.orig, linetype = 1, color = '#e3211c') +
geom_vline(xintercept = mean.orig - se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.orig + se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.obs, linetype = 1, color = '#377eb8') +
geom_vline(xintercept = mean.obs - se.obs, linetype = 'dashed', color = '#377eb8') +
geom_vline(xintercept = mean.obs + se.obs, linetype = 'dashed', color = '#377eb8') +
labs(x = 'Weight accuracy', y = '# of subjects') +
#labs(x = '', y = '') +
scale_y_continuous(breaks = NULL) +
#scale_x_continuous(limits = c(-.2, 1.1), breaks = c(0, .5, 1)) +
theme_black() +
scale_fill_brewer(palette = 'Set1') +
theme(legend.title = element_blank())
summary(lm(scale(weight.accuracy.averaged) ~ type, df.demo.filt.both))
df.questions$chosen = df.questions3$chosen
# combine all 3 together
df.questions1 = df.demo.filt.both %>%
select(subject, type, reported.h1, reported.h2, reported.h3) %>%
rename(q1 = reported.h1, q2 = reported.h2, q3 = reported.h3) %>%
pivot_longer(!c(subject, type), names_to = 'question', values_to = 'reported')
df.questions2 = df.demo.filt.both %>%
select(subject, type, actual.h1.prob, actual.h2.prob, actual.h3.prob) %>%
pivot_longer(!c(subject, type), values_to = 'prob')
df.questions3 = df.demo.filt.both %>%
select(subject, type, reported.h1.dichotomized, reported.h2.dichotomized, reported.h3.dichotomized) %>%
pivot_longer(!c(subject, type), values_to = 'chosen')
df.questions4 = df.demo.filt.both %>%
select(subject, type, actual.h1.prob.dichotomized, actual.h2.prob.dichotomized, actual.h3.prob.dichotomized) %>%
pivot_longer(!c(subject, type), values_to = 'best.family')
df.questions = df.questions1
df.questions$prob = df.questions2$prob
df.questions$chosen = df.questions3$chosen
df.questions$best.family = df.questions4$best.family
ggplot(df.questions, aes(x = prob, y = reported, color = type, group = type)) +
geom_point() +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nProb. of using\nheuristic',
y = 'Reported probability of\nusing heuristic') +
scale_color_brewer(palette = 'Set1')
m2 = lmer(scale(reported) ~ scale(prob)*type + (1 | subject), df.questions)
summary(m2)
q.grouped.rev = df.questions %>% group_by(type, best.family) %>%
summarize(chosen.m = mean(chosen),
chosen.se = se.prop(chosen))
ggplot(q.grouped.rev, aes(x = best.family, y = chosen.m, fill = type, group = type)) +
geom_col(color = 'white', position = dodge) +
geom_errorbar(aes(ymin = chosen.m - chosen.se,
ymax = chosen.m + chosen.se),
width = .2, color = 'white', position = dodge) +
theme_black() +
labs(x = 'Used heuristic',
y = '% reporting\nusing heuristic')  +
scale_fill_brewer(palette = 'Set1')+
theme(legend.title = element_blank())
m1 = glmer(chosen ~ best.family*type + (best.family | subject), df.questions, family = 'binomial')
m2 = glmer(chosen ~ best.family*type + (1 | subject), df.questions, family = 'binomial')
summary(m2)
save.image(paste0(filepath, 'analysis_output.rdata'))
